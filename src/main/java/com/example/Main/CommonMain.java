package com.example.Main;

import com.example.Data.Animal;
import com.example.Service.TargetClass;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class CommonMain {
    public static void main(String[] args) {
//        TargetClass a=null;
//        if(a==null || a.getA()==0) {
//            System.out.println("Still alive");
//        }
//        if(a!=null && a.getA()==0) {
//            return;
//        }
//        System.out.println("Still alive");
//        if(a==null && a.getA()==0) {
//            System.out.println("Still alive");
//        }
//        if(a!=null || a.getA()==0) {
//            return;
//        }
//        System.out.println("Still alive");

//        String a = "a-b-c";
//        String b = "ha";
//        String delim = "-";
//        System.out.println("sub a:");
//        for(String s : a.split(delim)) {
//            System.out.println(s);
//        }
//        System.out.println("sub b");
//        for(String s : b.split(delim)) {
//            System.out.println(s);
//        }

//        List<Long> testList = new ArrayList<>();
//        testList.add(1L);
//        testList.add(2L);
//        testList.add(3L);
//        testList.add(2L);
//        System.out.println(testList);
//        testList = testList.stream().distinct().collect(Collectors.toList());
//        System.out.println(testList);

//        List<Animal> animals = new ArrayList<>();
//        animals.add(new Animal(1L));
//        animals.add(new Animal(2L));
//        animals.add(new Animal(3L));
////        String[] ids = animals.stream().map(animal -> animal.getId()+"").collect(Collectors.toList()).toArray(new String[animals.size()]);
//        String[] ids = animals.stream().map(animal -> animal.getId()+"").toArray(String[]::new);
//        System.out.println(String.join("-", ids));
//        List<Long> longs = Arrays.stream(ids).map(s -> Long.parseLong(s)+1).collect(Collectors.toList());
//        System.out.println(longs);
//
//        Optional<Animal> animalOptional = Optional.empty();
//        System.out.println(animalOptional.isPresent());

        //Quang con test
//        String test= "abc-abc-cba-abc-cbd-acb-quang-con";
//        String []testArr = test.split("-");
//        System.out.println(Arrays.stream(testArr).distinct().collect(Collectors.toList()));
//        long endOfTime = 9223372036854775807L;
//        long averageYearConsume = 365*86400*1000L;
//        long startOfTime = 1970L;
//        long theEnd = (endOfTime/averageYearConsume) + startOfTime;
//        System.out.println(theEnd);
//
//        System.out.println(new Date(Long.MAX_VALUE));
//
        System.out.println("Hello\nworld\033[1Aearth");

        System.out.println("\033[34m████████████████████████████████████████████████████████████████████████████████\n" +
                "\033[34m████████████████████████████████████████████████████████████████████████████████\n" +
                "\033[31m██████████████████\033[34m████████████████\033[30m██████████████████████████████\033[34m████████████████\n" +
                "\033[31m████████████████████████████████\033[30m██\033[37m██████████████████████████████\033[30m██\033[34m██████████████\n" +
                "\033[31m████\033[31m██████████████████████████\033[30m██\033[37m██████\033[35m██████████████████████\033[37m██████\033[30m██\033[34m████████████\n" +
                "\033[31m██████████████████████████████\033[30m██\033[37m████\033[35m████████████████\033[30m████\033[35m██████\033[37m████\033[30m██\033[34m██\033[30m████\033[34m██████\n" +
                "\033[31m██████████████████████████████\033[30m██\033[37m██\033[35m████████████████\033[30m██\033[37m████\033[30m██\033[35m██████\033[37m██\033[30m████\033[37m████\033[30m██\033[34m████\n" +
                "\033[33m██████████████████\033[31m████████████\033[30m██\033[37m██\033[35m████████████████\033[30m██\033[37m██████\033[35m██████\033[37m██\033[30m██\033[37m██████\033[30m██\033[34m████\n" +
                "\033[33m██████████████████████\033[30m██\033[33m██████\033[30m██\033[37m██\033[35m████████████████\033[30m██\033[37m██████\033[30m████████\033[37m████████\033[30m██\033[34m████\n" +
                "\033[33m████████████████████\033[30m██\033[37m██\033[30m██\033[33m████\033[30m██\033[37m██\033[35m████████████████\033[30m██\033[37m██████████████████████\033[30m██\033[34m████\n" +
                "\033[32m██████████████████\033[33m██\033[30m██\033[37m██\033[30m████████\033[37m██\033[35m██████████████\033[30m██\033[37m██████████████████████████\033[30m██\033[34m██\n" +
                "\033[32m██████████████████████\033[37m████████\033[30m██\033[37m██\033[35m██████████████\033[30m██\033[37m██████\033[33m██\033[37m██████████\033[33m██\033[30m██\033[37m████\033[30m██\033[34m██\n" +
                "\033[32m██████████████████████\033[30m████\033[37m████\033[30m██\033[37m██\033[35m██████████████\033[30m██\033[37m██████\033[30m██\033[37m██████\033[30m██\033[37m██\033[30m████\033[37m████\033[30m██\033[34m██\n" +
                "\033[34m██████████████████\033[32m████████\033[30m██████\033[37m██\033[35m██████████████\033[30m██\033[37m██\033[35m████\033[37m████████████████\033[35m████\033[30m██\033[34m██\n" +
                "\033[34m██████████████████████████████\033[30m██\033[37m████\033[35m██████████████\033[30m██\033[37m██████\033[30m████████████\033[37m████\033[30m██\033[34m████\n" +
                "\033[34m██████████████████\033[34m████\033[34m██████\033[30m████\033[37m██████\033[35m██████████████\033[30m██\033[37m██████████████████\033[30m██\033[34m██████\n" +
                "\033[34m██████████████████████████\033[30m██\033[37m██\033[30m████\033[37m████████████████████\033[30m██████████████████\033[34m████████\n" +
                "\033[34m████████████████████████\033[30m██\033[37m██████\033[30m████████████████████████████████\033[37m██\033[30m██\033[34m████████████\n" +
                "\033[34m████████████████████████\033[30m██\033[37m████\033[30m██\033[34m██\033[30m██\033[37m████\033[34m████████████\033[30m██\033[37m████\033[30m████\033[37m████\033[30m██\033[34m████████████\n" +
                "\033[34m████████████████████████\033[30m██████\033[34m████\033[30m██████\033[34m████████████\033[30m██████\033[34m████\033[30m██████\033[34m████████████\n" +
                "████████████████████████████████████████████████████████████████████████████████" +
                "\033[0m");

//        System.out.println("Hallo \033[32m\033[47mgreen\033[0m-text.");

        System.out.println(
                "\n"+
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "███████████████████████████████████████████████████████████████████████████████████████████████████████\n" +
                        "\033[0m"
        );

    }
}
